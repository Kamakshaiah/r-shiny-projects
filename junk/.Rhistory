}
if (is.null(args[['type']])){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers(type = "ts")
outliers()
outliers <- function(d = rnorm(100), y = 90, ...){
args <- list(d, ...)
if (is.null(args[['d']])){
d <- round(rnorm(100)*100, 2)
}
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (!is.null(args[['ts']])){
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers("ts")
outliers(ts)
lm(x ~ ., data = x)
data(ozone)
lm(x ~ .)
lm(x ~ ., data = as.data.frame(x))
fit <- lm(x ~ ., data = as.data.frame(x))
cd <- cooks.distance(fit)
plot(cd); abline(h = 4*mean(cd, na.rm = T))
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red")
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(labels = names(cd))
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = names(cd))
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = names(cd), col = "red")
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = ifelse(cd > 4*mean(cd, na.rm = T), names(cd)), col = "red")
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = ifelse(cd > 4*mean(cd, na.rm = T), names(cd), ""), col = "red")
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS_1.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS_1.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
help("pcr")
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
d1 = rnorm(20, mean = 20)
pcr(d1, "normal", lsl = 17, usl = 23)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo = facDesign(k = 3, centerCube = 4)
fdo
fdo = facDesign(k = 4)
fdo
fdo = facDesign(k = 3)
yield = c(simProc(120, 140, 1),simProc(80,140, 1),simProc(120,140, 2),
simProc(120,120, 1),simProc(100,130, 1.5),simProc(100,130, 1.5),
simProc(80,120, 2),simProc(100,130, 1.5), simProc(100,130, 1.5),
simProc(120,120, 2),simProc(80,140, 2), simProc(80,120, 1))
response(fdo) = yield
fdo = facDesign(k = 3, centerCube = 4) #fdo - factorial design object
names(fdo) = c("Factor 1", "Factor 2", "Factor 3") #optional
lows(fdo) = c(80, 120, 1) #optional
highs(fdo) = c(120, 140, 2) #optional
summary(fdo)
yield = simProc(x1 = 120, x2 = 140, x3 = 2)
yield = c(simProc(120, 140, 1),simProc(80,140, 1),simProc(120,140, 2),
simProc(120,120, 1),simProc(100,130, 1.5),simProc(100,130, 1.5),
simProc(80,120, 2),simProc(100,130, 1.5), simProc(100,130, 1.5),
simProc(120,120, 2),simProc(80,140, 2), simProc(80,120, 1))
response(fdo) = yield
effectPlot(fdo, classic = TRUE)
source("simProc")
simProc()
simProc
getAnywhere("simProc")
getAnywhere(simProc)
getAnywhere(qualityTools::simProc)
method(simProc)
methods(simProc)
methods("simProc")
showMethods("simProc")
showMethods(simProc)
getMethod(simProc)
getMethod("simProc")
qualityTools::simProc
qualityTools::.simProc
qualityTools:::simProc
qualityTools:::.simProc
qualityTools::::simProc
edit(simProc)
simProc(120, 140, 1)
round(rnorm(1), 2)
round(rnorm(1), 2)
round(rnorm(1), 2)
yield
runif(10, 0, 1)
fdo
dim(fdo)
length(fdo)
fdo
names(fdo)
lm(yield ~ A*B*C, data = fdo)
paretoPlot(fdo)
normalPlot(fdo)
wirePlot(A, B, yield, data = fdo)
contourPlot(A, B, yield, data = fdo)
aliasTable(fdo)
fracChoose()
fracChoose()
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
s <- a,b,c
s <- "a,b,c"
s
a <- s
a
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo
dim(fdo)
length(fdo)
fdo$`Factor 1`
fdo$Factor 1
names(fdo)
length(fdo$`Factor 1`)
length(fdo$Factor 1)
length(fdo[, 1])
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo <- factDesign(3)
fdo <- facDesign(3)
fdo
fdo <- facDesign(k=3)
fdo
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo <- facDesign(k=4)
fdo
length(fdo[, 1])
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
s
fdo <- facDesign(k=3)
fdo
lows(fdo) <- c(s)
s
s <- 80, 120, 1
s <- "80, 120, 1"
s
lows(fdo) <- s
h <- "120, 140, 2"
highs(fdo) <- h
fdo
summary(fdo)
format(s, ",")
format(s, big.mark = ",")
format("1,2,3", big.mark = ",")
prettyNum("1,2,3")
prettyNum("1,2,3", big.mark = ",")
format("1,2,3", big.mark = ",", scientific = FALSE)
strsplit(s, ",")
as.numeric(strsplit(s, ","))
strsplit(s, ",")[1]
strsplit(s, ",")
strsplit(s, ",")[[1]]
strsplit(s, ",")[[1]][1]
as.numeric(strsplit(s, ",")[[1]][1])
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
mltres <- read.csv(file.choose())
head(mltres)
typeof(mltres)
fdo <- facDesign(k= 3)
fdo
response(fdo) <- data.frame(mltres)
response(fdo) <- data.frame(mltres)[1:8, ]
fdo
wirePlot(A, B, yield, data = fdo, form = "yield~A+B+C+A*B")
wirePlot(A, B, yield, data = fdo, form = "y2~A+B+C+A*B")
contourPlot(A, B, yield, data = fdo, form = "y2~A+B+C+A*B")
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
fo <- yield~A+B+C+A*B
fo
typeof(fo)
fo <- as.formula(yield~A+B+C+A*B)
fo
typeof(fo)
class(fo)
fo <- yield~A+B+C+A*B
class(fo)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
df <- read.csv(file.choose())
head(df)
fdo <- facDesign(k = 3)
response(fdo) <- data.frame(df[1:8])
response(fdo) <- data.frame(df[1:8,])
fdo
wirePlot(A, B, yield, data = fdo, form = "yield~A+B+C+A*B")
contourPlot(A, B, y2, data = fdo, form = "y2~A+B+C+A*B")
df
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
fact <- "A, B"
fact
as.character(fact)
strsplit(fact, ",")
strsplit(fact, ",", sep = ",")
paste(strsplit(fact, ","), sep = ","
)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
fdo
sao =steepAscent(factors=c("A","B"),response="yield",data=fdo,steps=20)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
install.packages("lasso2")
install.packages("/media/ubuntu/C2ACA28AACA27895/Windows/sw/R/lasso2_1.2-20.tar.gz", repos = NULL, type = "source")
library(lasso2)
data("Prostate")
write.csv(Prostate, "/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/datasets/prostrate.csv")
library(caret)
data(package = "caret")
help("train")
??heart_tidy.csv
??heart_tidy
??heart data
??heart
help("bbbDescr")
head("bbbDescr")
View("bbbDescr")
str("bbbDescr")
str("bbbDescr")
bbbDescr
library(caret)
BloodBrain
logBBB
logb
data("segmentationData")
View(segmentationData)
help("segmentationData")
names(segmentationData)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
heart.data <- read.csv(file.choose())
inTrainRows <- createDataPartition(heart.data$num,p=0.7,list=FALSE)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
logRegModel <- train(num ~ ., data=trainData, method = 'glm', family = 'binomial')
trainData <- heart.data[inTrainRows, ]
testData <-  heart.data[-inTrainRows,]
trainprop <- nrow(trainData)/(nrow(testData)+nrow(trainData))
trainprop
logRegModel <- train(num ~ ., data=trainData, method = 'glm', family = 'binomial')
warning()
warnings()
inTrainRows
head(trainData)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
heartdf <- read.csv(file.choose())
inTrainRows <- createDataPartition(heartdf$num,p=0.7,list=FALSE)
trainData <- heartdf[inTrainRows, ]
testData <-  heartdf[-inTrainRows,]
logRegModel <- train(num ~ ., data=trainData, method = 'glm', family = 'binomial')
logRegModel
logRegPrediction <- predict(logRegModel, testData)
logRegPrediction
logRegConfMat <- confusionMatrix(logRegPrediction, testData[,"num"])
length(logRegPrediction)
length(testData[, "num"])
levels(testData[, "num"])
logRegConfMat <- confusionMatrix(logRegPrediction, testData)
logRegConfMat <- confusionMatrix(logRegPrediction, testData["num"])
logRegConfMat <- confusionMatrix(logRegPrediction, testData[, "num"])
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
logRegConfMat <- confusionMatrix(logRegPrediction, testData["num"])
logRegConfMat <- confusionMatrix(logRegPrediction, testData[, "num"])
head(logRegPrediction)
testData[, "num"]
length(testData[, "num"])
length(logRegPrediction)
logRegPrediction <- predict(logRegModel, testData, type = "class")
logRegPrediction <- predict(logRegModel, testData, type = "raw")
logRegConfMat <- confusionMatrix(logRegPrediction, testData[,"num"])
logRegConfMat <- confusionMatrix(logRegPrediction, as.factor(testData[,"num"]))
levels(testData[, "num"])
testData[, "num"]
levels(as.factor(testData[, "num"]))
logRegConfMat <- confusionMatrix(logRegPrediction, as.factor(testData[,"num"]))
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
levels(heartdf[, "num"]) = c("No disease","Disease")
inTrainRows <- createDataPartition(heartdf$num,p=0.7,list=FALSE)
trainData <- heartdf[inTrainRows, ]
testData <-  heartdf[-inTrainRows,]
logRegModel <- train(num ~ ., data=trainData, method = 'glm', family = 'binomial')
logRegModel
logRegPrediction <- predict(logRegModel, testData, type = "raw")
logRegConfMat <- confusionMatrix(logRegPrediction, testData[,"num"])
intrain <- createDataPartition(y = heartdf[, "num"], p= 0.7, list = FALSE)
training <- heart_df[intrain,]
training <- heartdf[intrain,]
testing <- heartdf[-intrain,]
dim(training); dim(testing)
training[,"num"] = factor(training[,"num"])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(V14 ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear <- train(num ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear <- train(num ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear
test_pred <- predict(svm_Linear, newdata = testing)
confusionMatrix(test_pred, testing[, "num"] )
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/HCQualA/HCQualA.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
install.packages("/media/ubuntu/C2ACA28AACA27895/WORK/R/packs/klaR_0.6-14.tar.gz", repos = NULL, type = "source")
install.packages("/media/ubuntu/C2ACA28AACA27895/WORK/R/packs/questionr_0.7.0.tar.gz", repos = NULL, type = "source")
install.packages("/media/ubuntu/C2ACA28AACA27895/WORK/R/packs/labelled_2.1.0 (1).tar.gz", repos = NULL, type = "source")
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/SEM/RGfSEM.R')
anildf <- read.csv(file.choose())
names(anildf)
dim(anildf)
faout <- fa(anildf[, 7:60])
structure.diagram(faout)
library(psych)
faout <- fa(anildf[, 7:60])
structure.diagram(faout)
structure.diagram(faout)
structure.graph(faout)
BiocManager::install("Rgraphviz", version = "3.8")
install.packages("BiocManager")
semmodel <- structure.sem(faout)
semout <- sem(model = semmodel, data = anildf[, 7:60])
library(sem)
semout <- sem(model = semmodel, data = anildf[, 7:60])
semout
summary(semout)
sem.diagram(semout)
sem.diagram(semout)
sem.graph(semout)
faout <- fa(anildf[, 7:60], 7)
faout <- fa(cor(anildf[, 7:60]), 7)
semmodel <- structure.sem(faout)
semout <- sem(model = semmodel, data = anildf[, 7:60])
sem.diagram(semout)
semout
summary(semout)
faout <- fa(cor(anildf[, 7:16]), 2)
semmodel <- structure.sem(faout)
structure.diagram(faout)
anildf <- read.csv(file.choose())
faout <- fa(cor(anildf[, 7:60]), 7)
structure.diagram(faout)
semmodel <- structure.sem(faout)
semout <- sem(model = semmodel, data = anildf[, 7:60])
sem.diagram(semout)
omega(anildf)
omega(complete.cases(anildf))
omega(complete.cases(anildf[, 7:60]))
omega(anildf[, 7:60])
fa.diagram(faout)
sem.diagram(semout)
fa.diagram(semout)
faout
semout
data.frame(semout)
semdfout <- semout
data.frame(semdfout)
as.data.frame(semdfout)
as.matrix(semout)
semout$coeff
as.data.frame(semout$coeff)
as.data.frame(semout$coeff, semout$vcov)
as.data.frame(semout$vcov)
as.data.frame(semout$coeff)
install.packages("/media/ubuntu/C2ACA28AACA27895/Windows/sw/R/pso_1.0.3.tar.gz", repos = NULL, type = "source")
library(pso)
psoptim(rep(NA,2),function(x) 20+sum(x^2-10*cos(2*pi*x)), lower=-5,upper=5,control=list(abstol=1e-8))
o <- psoptim(rep(NA,2),function(x) 20+sum(x^2-10*cos(2*pi*x)),
lower=-5,upper=5,control=list(abstol=1e-8,trace=1,REPORT=1,
trace.stats=TRUE))
plot(o$stats$it,o$stats$error,log="y",xlab="It",ylab="Error")
points(o$stats$it,sapply(o$stats$f,min),col="blue",pch=2)
rep(NA, 2)
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS_old_2.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/MLTRS/mltrs/MLTRS/MLTRS/MLtRS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/SEM/RGfSEM.R')
library(shiny); runApp('Downloads/RGfSEM-master/RGfSEM.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/junk/search_input.R')
install.packages("/media/ubuntu/C2ACA28AACA27895/Windows/sw/R/shinyWidgets_0.4.8.tar.gz", repos = NULL, type = "source")
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/junk/search_input.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/junk/search_input.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/junk/search_input.R')
