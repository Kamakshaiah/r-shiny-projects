if (x[i] <= ll & x[i] >= ul){
y[i] <- x[i]
}
}
y
for (i in 1:length(x)){x[i] <= ul}
for (i in 1:length(x)){print(x[i] <= ul)}
for (i in 1:length(x)){print(x[i] >= ul )}
for (i in 1:length(x)){print(x[i] >= ul & x[i] <= ll)}
mean(x)
ul <- 50
ll <- 80
for (i in 1:length(x)){print(x[i] >= ul & x[i] <= ll)}
ul <- mean(x) + 2*sd(x)
ll <- mean(x) - 2*sd(x)
ul
ll
plot(x)
plot(x); lines(h=mean(x))
plot(x); abline(h=mean(x))
plot(x); abline(h=sd(x), col = "red")
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, color = "red", add = TRUE)
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, color = "red")
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, col = "red")
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, col = "red")
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, col = "green")
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, col = "green"); abline(h=ll, col = "green")
x <- round(rnorm(100)*100, 2)
ul <- mean(x) + 2*sd(x)
ll <- mean(x) - 2*sd(x)
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, col = "green"); abline(h=ll, col = "green")
ul <- mean(x) + 1.96*sd(x)
ll <- mean(x) - 1.96*sd(x)
y <- matrix(NA, length(x), 1)
for (i in 1:length(x)){
if (x[i] <= ll & x[i] >= ul){
y[i] <- x[i]
}
}
y
plot(x); abline(h=mean(x), col = "red"); abline(h=ul, col = "green"); abline(h=ll, col = "green")
for (i in 1:length(x)){
if (x[i] <= ll && x[i] >= ul){
y[i] <- x[i]
}
}
y
for (i in 1:length(x)){print(x[i] >= ul )}
for (i in 1:length(x)){print(x[i] >= ul & x[i] <= ll)}
for (i in 1:length(x)){print(x[i] >= ul | x[i] <= ll)}
y <- matrix(NA, length(x), 1)
for (i in 1:length(x)){
if (x[i] <= ll | x[i] >= ul){
y[i] <- x[i]
}
}
y
plot(x); abline(h=mean(x), col = "red"); plot(y, col = red); abline(h=ul, col = "green"); abline(h=ll, col = "green")
plot(x); abline(h=mean(x), col = "red"); plot(y, col = "red"); abline(h=ul, col = "green"); abline(h=ll, col = "green")
plot(x); abline(h=mean(x), col = "red"); plot(y, col = "red", add = TRUE); abline(h=ul, col = "green"); abline(h=ll, col = "green")
plot(x); plot(y, col = "red")
plot(x); plot(y, col = "red", add = TRUE)
plot(x); points(y, col = "red")
plot(x); points(y, col = "red")
plot(x); points(y, col = "red", pch = 21)
plot(x); points(y, col = "red", pch = 24)
plot(x); points(y, col = "red", pch = 26)
plot(x); points(y, col = "red", pch = 19)
plot(x); points(y, col = "red", pch = 19)
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green")
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, "UL")
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, expression("UL=ul)"))
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, expression(UL=ul))
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, expression(UL==ul))
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, expression(UL==%ul))
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, expression("UL=", ul))
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, expression("UL=", ul))
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, paste("UL=", ul))
plot(x); points(y, col = "red", pch = 19); abline(h=mean(x), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(80, 200, paste("UL=", round(ul, 2))); text(80, -200, paste("LL=", round(ll, 2)))
dnorm(1.96)
pnorm(1.96)
qnorm(95)
dnorm(95)
dnorm(0.95)
dnorm(0.97)
qnorm(0.97)
qnorm(0.95)
pnorm(1.96) - pnorm(-1.96)
dnorm(0.95) - dnorm(0.25)
dnorm(0.95)
dnorm(-0.95)
dnorm(0.95)
1-dnorm(0.95)
pnorm(1.96) - pnorm(-1.96) # 95th percentile
dnorm(1.96)
dnorm(-1.96)
1 - dnorm(1.96)
pnorm(0.95)
qnorm(0.95)
qnorm(0.5)
qnorm(0.05)
qnorm(0.05)/2
qnorm(0.025)/2
qnorm(0.025)
qnorm(-0.025)
1 - qnorm(0.025)
dnorm(qnorm(0.025))
dnorm(1 - qnorm(0.025))
1 - dnorm(qnorm(0.025))
1-0.95
(1-0.95)/2
qnorm(1-0.95)
qnorm((1-0.95)/2)
-qnorm((1-0.95)/2)
y
na.omit(y)
y.na <- na.omit(y)
names(y.na)
y.na[1]
count(y)
as.numeric(y)
na.omit(y)
y[complete.cases(y)]
outliers <- function(d, y = 90, type = "line"){
if (!d){
d <- round(rnorm(100)*100, 2)
}
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (!type){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers(rnorm(100))
outliers()
outliers <- function(d = rnorm(100), y = 90, type = "line"){
if (!d){
d <- round(rnorm(100)*100, 2)
}
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (!type){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers <- function(d = rnorm(100), y = 90, type = "line"){
# if (!d){
#   d <- round(rnorm(100)*100, 2)
# }
#
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (!type){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers <- function(d = rnorm(100), y = 90, type = "line"){
# if (!d){
#   d <- round(rnorm(100)*100, 2)
# }
#
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (!is.null(type)){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers <- function(d = rnorm(100), y = 90, type = "line"){
# if (!d){
#   d <- round(rnorm(100)*100, 2)
# }
#
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (is.null(type)){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers(type = "ts")
outliers()
outliers <- function(d = rnorm(100), y = 90, type = "line"){
# if (!d){
#   d <- round(rnorm(100)*100, 2)
# }
#
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (!is.null(type)){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers(type = "ts")
outliers <- function(d = rnorm(100), y = 90, type = "line"){
args <- list(d, type)
if (is.null(args[[d]])){
d <- round(rnorm(100)*100, 2)
}
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (is.null(args[[type]])){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers(type = "ts")
outliers <- function(d = rnorm(100), y = 90, type = "line"){
args <- list(d, type)
if (is.null(args[['d']])){
d <- round(rnorm(100)*100, 2)
}
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (is.null(args[['type']])){
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers(type = "ts")
outliers()
outliers <- function(d = rnorm(100), y = 90, ...){
args <- list(d, ...)
if (is.null(args[['d']])){
d <- round(rnorm(100)*100, 2)
}
c1 <- quantile(d, 0.75)
c2 <- ll
c3 <- ul
ul <- mean(d) + 1.96*sd(d)
ll <- mean(d) - 1.96*sd(d)
y <- matrix(NA, length(d), 1)
for (i in 1:length(x)){
if (d[i] <= ll | d[i] >= ul){
y[i] <- d[i]
}
}
if (!is.null(args[['ts']])){
plot(d, type = "l"); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
} else {
plot(d); points(y, col = "red", pch = 19); abline(h=mean(d), col = "red");abline(h=ul, col = "green"); abline(h=ll, col = "green"); text(c1, ul, paste("UL=", round(ul, 2))); text(c1, ll, paste("LL=", round(ll, 2)))
}
}
outliers()
outliers("ts")
outliers(ts)
lm(x ~ ., data = x)
data(ozone)
lm(x ~ .)
lm(x ~ ., data = as.data.frame(x))
fit <- lm(x ~ ., data = as.data.frame(x))
cd <- cooks.distance(fit)
plot(cd); abline(h = 4*mean(cd, na.rm = T))
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red")
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(labels = names(cd))
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = names(cd))
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = names(cd), col = "red")
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = ifelse(cd > 4*mean(cd, na.rm = T), names(cd)), col = "red")
plot(cd); abline(h = 4*mean(cd, na.rm = T), col ="red"); text(x = 1:length(cd)+1, y = cd, labels = ifelse(cd > 4*mean(cd, na.rm = T), names(cd), ""), col = "red")
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS_1.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS_1.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
help("pcr")
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
d1 = rnorm(20, mean = 20)
pcr(d1, "normal", lsl = 17, usl = 23)
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo = facDesign(k = 3, centerCube = 4)
fdo
fdo = facDesign(k = 4)
fdo
fdo = facDesign(k = 3)
yield = c(simProc(120, 140, 1),simProc(80,140, 1),simProc(120,140, 2),
simProc(120,120, 1),simProc(100,130, 1.5),simProc(100,130, 1.5),
simProc(80,120, 2),simProc(100,130, 1.5), simProc(100,130, 1.5),
simProc(120,120, 2),simProc(80,140, 2), simProc(80,120, 1))
response(fdo) = yield
fdo = facDesign(k = 3, centerCube = 4) #fdo - factorial design object
names(fdo) = c("Factor 1", "Factor 2", "Factor 3") #optional
lows(fdo) = c(80, 120, 1) #optional
highs(fdo) = c(120, 140, 2) #optional
summary(fdo)
yield = simProc(x1 = 120, x2 = 140, x3 = 2)
yield = c(simProc(120, 140, 1),simProc(80,140, 1),simProc(120,140, 2),
simProc(120,120, 1),simProc(100,130, 1.5),simProc(100,130, 1.5),
simProc(80,120, 2),simProc(100,130, 1.5), simProc(100,130, 1.5),
simProc(120,120, 2),simProc(80,140, 2), simProc(80,120, 1))
response(fdo) = yield
effectPlot(fdo, classic = TRUE)
source("simProc")
simProc()
simProc
getAnywhere("simProc")
getAnywhere(simProc)
getAnywhere(qualityTools::simProc)
method(simProc)
methods(simProc)
methods("simProc")
showMethods("simProc")
showMethods(simProc)
getMethod(simProc)
getMethod("simProc")
qualityTools::simProc
qualityTools::.simProc
qualityTools:::simProc
qualityTools:::.simProc
qualityTools::::simProc
edit(simProc)
simProc(120, 140, 1)
round(rnorm(1), 2)
round(rnorm(1), 2)
round(rnorm(1), 2)
yield
runif(10, 0, 1)
fdo
dim(fdo)
length(fdo)
fdo
names(fdo)
lm(yield ~ A*B*C, data = fdo)
paretoPlot(fdo)
normalPlot(fdo)
wirePlot(A, B, yield, data = fdo)
contourPlot(A, B, yield, data = fdo)
aliasTable(fdo)
fracChoose()
fracChoose()
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
s <- a,b,c
s <- "a,b,c"
s
a <- s
a
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo
dim(fdo)
length(fdo)
fdo$`Factor 1`
fdo$Factor 1
names(fdo)
length(fdo$`Factor 1`)
length(fdo$Factor 1)
length(fdo[, 1])
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo <- factDesign(3)
fdo <- facDesign(3)
fdo
fdo <- facDesign(k=3)
fdo
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
fdo <- facDesign(k=4)
fdo
length(fdo[, 1])
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
s
fdo <- facDesign(k=3)
fdo
lows(fdo) <- c(s)
s
s <- 80, 120, 1
s <- "80, 120, 1"
s
lows(fdo) <- s
h <- "120, 140, 2"
highs(fdo) <- h
fdo
summary(fdo)
format(s, ",")
format(s, big.mark = ",")
format("1,2,3", big.mark = ",")
prettyNum("1,2,3")
prettyNum("1,2,3", big.mark = ",")
format("1,2,3", big.mark = ",", scientific = FALSE)
strsplit(s, ",")
as.numeric(strsplit(s, ","))
strsplit(s, ",")[1]
strsplit(s, ",")
strsplit(s, ",")[[1]]
strsplit(s, ",")[[1]][1]
as.numeric(strsplit(s, ",")[[1]][1])
runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS.R')
library(shiny); runApp('/media/ubuntu/C2ACA28AACA27895/WORK/R/RfQASS/RfQASS/RfQASS.R')
